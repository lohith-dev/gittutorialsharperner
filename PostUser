<!DOCTYPE html>
<html>
    <head>
        <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-4bw+/aepP/YC94hEpVNVgiZdgIC5+VKNBQNGCHeKRQN+PtmoHDEXuppvnDJzQIu9" crossorigin="anonymous">
        <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.1/dist/js/bootstrap.bundle.min.js" integrity="sha384-HwwvtgBNo3bZJJLYd8oVXjrBZt8cqVSpeBNS5n7C8IVInixGAoxmnlMuBnhbgrkm" crossorigin="anonymous"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.19.0/axios.min.js"></script>
      <style>
            #formcomp {
                display: flex;
                justify-content: center; 
              
            }
            #header{
                text-align: center;
            }
            h1{
                color: orange;
                font-family: Arial, Helvetica, sans-serif;
                font-weight: bold;
            }
            #sub-button{
                margin-top: 15px;
                border-radius: 5px;
                background-color: orange;
                padding: 8px;
               
            }
           
         
            form{
                padding: 40px;
                margin: auto;
                 width: 450px;
                 border: 1px solid orange;
            }
            #time{
                display: flex;
                margin-top: 8px;
                justify-content: space-between;
            }
            label{
                color: black;
            }
       </style>
    </head>
<body>
    <script>

    async function getItem(){
        
            try{
                      var result = await axios.get('https://crudcrud.com/api/36cdd06af49647258ecfe243d96b6152/appointmentData');
                if(result){
                    result.data.forEach((resData, index) => {
                        

                                const parentDiv = document.getElementById('UserData');
                           

                                const childParagraph = document.createElement('li');
                                childParagraph.setAttribute('data-id', resData._id);

                                childParagraph.textContent = `${resData.name}-${resData.email}-${resData.phone}`;
                                parentDiv.appendChild(childParagraph);
                                var deleteBtn = document.createElement('button');
                                deleteBtn.className  = 'btn btn-danger btn-sm float-right delete';
                                deleteBtn.appendChild(document.createTextNode('Delete'));

                                var editBtn = document.createElement('button');
                                editBtn.className  = 'btn btn-success btn-sm float-right edit';
                                editBtn.appendChild(document.createTextNode('Edit'));

                                childParagraph.appendChild(editBtn);

                                childParagraph.appendChild(deleteBtn);
                            
                        });
                }
             
                }catch(error){
                    console.log(error);
                }
        
            }


var addIteme=(resData)=>{


const parentDiv = document.getElementById('UserData');
                   

    const childParagraph = document.createElement('li');
    childParagraph.setAttribute('data-id', resData._id);

    childParagraph.textContent = `${resData.name}-${resData.email}-${resData.phone}`;
    parentDiv.appendChild(childParagraph);
    var deleteBtn = document.createElement('button');
    deleteBtn.className  = 'btn btn-danger btn-sm float-right delete';
    deleteBtn.appendChild(document.createTextNode('Delete'));

    var editBtn = document.createElement('button');
    editBtn.className  = 'btn btn-success btn-sm float-right edit';
    editBtn.appendChild(document.createTextNode('Edit'));

    childParagraph.appendChild(editBtn);

    childParagraph.appendChild(deleteBtn);

}

var edititemItem=(itemId,data)=>{
    const tobeEdited = document.querySelector(`li[data-id="${itemId}"]`);
   
    tobeEdited.textContent = `${data.name}-${data.email}-${data.phone}`;
    // elementToRemove.remove();
    var deleteBtn = document.createElement('button');
    deleteBtn.className  = 'btn btn-danger btn-sm float-right delete';
    deleteBtn.appendChild(document.createTextNode('Delete'));

    var editBtn = document.createElement('button');
    editBtn.className  = 'btn btn-success btn-sm float-right edit';
    editBtn.appendChild(document.createTextNode('Edit'));

    tobeEdited.appendChild(editBtn);

    tobeEdited.appendChild(deleteBtn);
}
            function populateInputFields(editData) {
                    // const userData = JSON.parse(localStorage.getItem(productNamepart));
                     // console.log(userData);
                    //  Check if data exists
                    if (editData) {
                     // Populate input fields
                        document.getElementById('name').value = editData.name;
                        document.getElementById('email').value = editData.email;
                        document.getElementById('phone').value=editData.phone;


                       const editItemIdInput = document.getElementById('editItemId');
                       editItemIdInput.value = editData._id;
                    }
                }

        window.onload =()=>{
            const form =document.querySelector("form");
            const buton =document.querySelector("subut");

            

            form.addEventListener('submit', e=>{
                if(!form.checkValidity()){
                    e.preventDefault()
                }
                form.classList.add('was-validated')
            })

            getItem();

            var itemListele = document.getElementById('UserData');

            itemListele.addEventListener('click', removeItem);
            itemListele.addEventListener('click', editItem);

            async function  removeItem(e){
                        if(e.target.classList.contains('delete')){
                            if(confirm('Are You Sure?')){
                                const listItem = e.target.closest('li');
                                 const itemId = listItem.getAttribute('data-id');
                                 const elementToRemove = document.querySelector(`li[data-id="${itemId}"]`);
                                // const parts = li.split('-');
                                console.log(itemId);
                                // localStorage.removeItem(parts[1]);
                                // itemList.removeChild(list);
                                try{
                                    var data = await axios.delete(`https://crudcrud.com/api/36cdd06af49647258ecfe243d96b6152/appointmentData/${itemId}`);
                                    // console.log(data);
                                    if(data.status==200){
                                        elementToRemove.remove();
                                    }
                                }catch(error){
                                    console.log(error)
                                }
                              
                                  
                            }
                        }
                    }

                    async function editItem(e){
                    if(e.target.classList.contains('edit')){
                        const listItem = e.target.closest('li');
                        const itemId = listItem.getAttribute('data-id');
                        let edit=null;

                        try{
                            var data = await axios.get('https://crudcrud.com/api/36cdd06af49647258ecfe243d96b6152/appointmentData');
                            if(data){
                                edit=data.data.find(data=>data._id===itemId);
                                console.log(edit);
                                populateInputFields(edit);
                            }

                        }catch(error){
                            console.log(error);
                        }
  
                        // localStorage.removeItem(parts[1]);
                        // itemList.removeChild(list);
                    }
                }
        }

       async function handleSubmit(event) {
            event.preventDefault(); 

            const name = document.getElementById('name').value;
            const email = document.getElementById('email').value;
            const phone = document.getElementById('phone').value;
            const editItemId = document.getElementById('editItemId').value;
            const data = {
               name  : name,
               email : email,
               phone : phone,
            }
            
                if(editItemId){
                    try{
                        var editdata = await axios.put(`https://crudcrud.com/api/36cdd06af49647258ecfe243d96b6152/appointmentData/${editItemId}`,data);
                        console.log(editdata)
                        if(editdata.status==200){
                            edititemItem(editItemId,data);
                        }

                    }catch(error){
                        console.log(error);
                    }
                
                    
                }else{
                    
                try{
                        var postdata=await axios.post('https://crudcrud.com/api/36cdd06af49647258ecfe243d96b6152/appointmentData',data);
                       
                        if(postdata){
                            addIteme(postdata.data);
                        }
                    
                }catch(error){
                    console.log(error);
                }
            }
        }
    </script>
    <div class="container">
       
    <form novalidate onSubmit="handleSubmit(event)">

       <div id="header">
         <h1>Add User</h1>
       </div>
   
          
          <div class="form-floating mt-3">
            <input  type="text" id ="name"class="form-control" placeholder="Enter email" required>
            <label for="name" class="form-label" >Name:</label>
          </div>

          <div class="form-floating mt-3">
            <input type="email" class="form-control"  id ="email" placeholder="Enter email"   required>
            <label for="email" class="form-label" >Email:</label>
            <div class="invalid-feedback">Invalid Email</div>
          </div>
            
          <div class="form-floating mt-3">
            <input type="text" class="form-control"  id="phone"  placeholder="Enter phone"  pattern="[0-9]{10}"  required>
            <label for="fname" class="form-label" >Phone:</label>
            <div class="invalid-feedback">Invalid Phone Number</div>
            <div class="form-text">Please enter a 10-digit phone number (numbers only).</div>
          </div>

          <input type="hidden" id="editItemId" name="editItemId">
          
          <!-- <div class="col-12 mt-3">
            <label for="fname"  class="form-label" >Time for Call:</label>
            <div class="input-group">
             
                 
                    <input type="date" id="seldate" class="form-control" name="birthday">                    
                    <input type="time" id="seltime" class="form-control" name="appt">
            
            </div>   -->
            <input type="submit" id ="sub-button" class="subut" value="Add User">
       </div>

    <div id="user">
        <ul id="UserData">

        </ul>
    </div>
       
       
    </form> 
</div>
</body>
</html>
